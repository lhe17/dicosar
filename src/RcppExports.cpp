// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CGF_c
double CGF_c(const Eigen::Map<Eigen::MatrixXd>& info, const Eigen::VectorXd& t);
RcppExport SEXP _dicosar_CGF_c(SEXP infoSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type info(infoSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(CGF_c(info, t));
    return rcpp_result_gen;
END_RCPP
}
// del_CGF_c
Eigen::VectorXd del_CGF_c(const Eigen::Map<Eigen::MatrixXd>& info, const Eigen::VectorXd& t);
RcppExport SEXP _dicosar_del_CGF_c(SEXP infoSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type info(infoSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(del_CGF_c(info, t));
    return rcpp_result_gen;
END_RCPP
}
// g_c
double g_c(const Eigen::VectorXd& z);
RcppExport SEXP _dicosar_g_c(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(g_c(z));
    return rcpp_result_gen;
END_RCPP
}
// del_g_c
Eigen::VectorXd del_g_c(const Eigen::VectorXd& z);
RcppExport SEXP _dicosar_del_g_c(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(del_g_c(z));
    return rcpp_result_gen;
END_RCPP
}
// seq_c
Eigen::VectorXd seq_c(const Eigen::Map<Eigen::MatrixXd>& info1, const Eigen::Map<Eigen::MatrixXd>& info2, const Eigen::VectorXd& t, const Eigen::VectorXd& zeta);
RcppExport SEXP _dicosar_seq_c(SEXP info1SEXP, SEXP info2SEXP, SEXP tSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type info1(info1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type info2(info2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_c(info1, info2, t, zeta));
    return rcpp_result_gen;
END_RCPP
}
// jacift_c
Eigen::MatrixXd jacift_c(const Eigen::Map<Eigen::MatrixXd>& info1, const Eigen::Map<Eigen::MatrixXd>& info2, const Eigen::VectorXd& t, const Eigen::VectorXd& zeta);
RcppExport SEXP _dicosar_jacift_c(SEXP info1SEXP, SEXP info2SEXP, SEXP tSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type info1(info1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type info2(info2SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(jacift_c(info1, info2, t, zeta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dicosar_CGF_c", (DL_FUNC) &_dicosar_CGF_c, 2},
    {"_dicosar_del_CGF_c", (DL_FUNC) &_dicosar_del_CGF_c, 2},
    {"_dicosar_g_c", (DL_FUNC) &_dicosar_g_c, 1},
    {"_dicosar_del_g_c", (DL_FUNC) &_dicosar_del_g_c, 1},
    {"_dicosar_seq_c", (DL_FUNC) &_dicosar_seq_c, 4},
    {"_dicosar_jacift_c", (DL_FUNC) &_dicosar_jacift_c, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_dicosar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
